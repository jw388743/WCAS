#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Sep 20 12:02:24 2019

@author: james
"""

import os
import pandas as pd
import numpy as np


import datetime as DT


os.path.exists(projFld)


projFld = "/Users/james/Documents/ADEC7430"

codeFld = os.path.join(projFld, "PyCode")
fnsFld = os.path.join(codeFld,"_Functions")
outputFld = os.path.join(projFld, "Output")
rawDataFld = os.path.join(projFld, "RawData")
savedDataFld = os.path.join(projFld, "SavedData")

os.path.exists(outputFld)


rawTrainFile = os.path.join(rawDataFld,"Lecture2_train.csv")
rawTestFile  = os.path.join(rawDataFld,"Lecture2_test.csv")

rawTrain = pd.read_csv(rawTrainFile, sep=',')
rawTrain.shape

rawTrain.head(7) # notice the dots?

#%%
# let's expand the view - need options for pandas printout
pd.set_option('display.width',100)
pd.set_option('max_colwidth',50)
pd.set_option('display.max_columns',12)
rawTrain.head(7) # does it look better? did the dots vanish or are they still there?
#%%

type(rawTrain)
#%%
rawTrain_c = pd.read_csv(rawTrainFile, sep=',', dtype=object)
rawTrain_c.dtypes
rawTrain_c.head(5)
#%%
rawTrain.describe()

#%%
pd.isnull(rawTrain).astype(int)
pd.isnull(rawTrain).astype(int).aggregate(sum)
pd.isnull(rawTrain).astype(int).aggregate(sum).to_dict()


#%%
import missingno
missingno.bar(rawTrain)

#%%
import numpy as np
np.mean(rawTrain['Age'])
mydict= {}
mydict['age.impute']= np.mean(rawTrain['Age'])

mydict

#%% better way to visualize (for datasets with fewer columns)
import missingno
missingno.bar(rawTrain)

#%%
# can we see some records with missing Age valeus?
agecond = rawTrain.Age.isnull()
agecond
agecond.value_counts()
 # so here are our 177 missing recordss
 #%%
rawTrain.loc[agecond].head(10).drop(columns=['Name', 'Ticket'])
# how is missing age represented?
 
#%%
rTrain=rawTrain
rTrain = rTrain.drop(columns=['Name'])

rTrain.shape

rTrain.boxplot(column=['Age'])

#%%
rTrain.groupby('Pclass').boxplot(column=['Age'])

#%%
rTrain.groupby('Survived').boxplot(column=['Pclass'])
# HW: In 1-2 sentences describe what this boxplot tells you
#%%
rTrain.groupby(['Sex']).Age.value_counts().sort_index()
#%%
rTrain.groupby(['Sex']).Age.value_counts().sort_index().reset_index(name='freq') 

#%%
# best to create the variable separately...
rTrain['Age5'] = 5*np.ceil(rTrain['Age']/5)
rTrain.groupby(['Sex']).Age5.value_counts()# 
# more like it...
# now clean-up the index and sorting as we did above
rTrain.groupby(['Survived']).Sex.value_counts()

#%%
rTrain.groupby(['Sex']).apply(lambda x: 5*np.ceil(x.Age/5)).value_counts().sort_index()
# Can you figure out what is happening above?
# not quite what we would have liked... where are the groups by Sex in the output?
#%%
rTrain.groupby(['Survived']).Age5.value_counts()
#%%
rTrain.groupby(['Age5']).Survived.mean()
#%%
rTrain.groupby(['Pclass']).Survived.mean()
#%%
rTrain.(['Pclass']).value_counts()